/** @file screen_driver_32x64
    @brief Implementation of the driver to display images and text on the
    32x64 LED Matrix screen.

    Adapted from the Arduino RGB Matrix Panel library.

    @author Michael You (mikinty)

    @note TO be run on an Arduino Mega
*/

#include <RGBmatrixPanel.h>
#include "screen_driver_32x64.h"

#define OE   9
#define LAT 10
#define CLK 11
#define A   A0
#define B   A1
#define C   A2
#define D   A3

/** @brief Positions of the digits on the scoreboard */
#define SCORE_DIGIT_100_ROW  1
#define SCORE_DIGIT_100_COL 1

#define SCORE_DIGIT_010_ROW  1
#define SCORE_DIGIT_010_COL 22

#define SCORE_DIGIT_001_ROW  1
#define SCORE_DIGIT_001_COL 43

#define NUM_SCORE_DIGITS     3
#define MAX_SCORE          999

/** @brief Contains the positions for the digits on the screen */
static const cursor_t SCORE_POSITIONS[NUM_SCORE_DIGITS] = {
  {
    SCORE_DIGIT_001_ROW,
    SCORE_DIGIT_001_COL
  },
  {
    SCORE_DIGIT_010_ROW,
    SCORE_DIGIT_010_COL
  },
  {
    SCORE_DIGIT_100_ROW,
    SCORE_DIGIT_100_COL
  }
};

/** @brief How many digits we support */
#define NUM_DIGITS 10

/** @brief Number graphic dimensions */
#define NUM_WIDTH  20
#define NUM_HEIGHT 30

/*** NUMBER GRAPHICS ***/
static uint32_t NUM_GRAPHICS[NUM_DIGITS][NUM_HEIGHT] = {
  {
    0B00000001111100000000,
    0B00000111111110000000,
    0B00111111111111110000,
    0B00111111111111111000,
    0B00111110000001111100,
    0B00110000000000001100,
    0B00110000000000001100,
    0B00110000000000001100,
    0B00110000000000001100,
    0B00110000000000001100,
    0B00110000000000001100,
    0B00110000000000001100,
    0B00110000000000001100,
    0B00110000000000001100,
    0B00110000000000001100,
    0B00110000000000001100,
    0B00110000000000001100,
    0B00110000000000001100,
    0B00110000000000001100,
    0B00110000000000001100,
    0B00110000000000001100,
    0B00110000000000001100,
    0B00110000000000001100,
    0B00110000000000001100,
    0B00110000000000001100,
    0B00111110000001111100,
    0B00111111111111111000,
    0B00111111111111110000,
    0B00000111111110000000,
    0B00000001111100000000
  },
  {
    0B00000000001100000000,
    0B00000000011110000000,
    0B00000001111110000000,
    0B00000011111110000000,
    0B00000111111110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B11111111111111111111,
    0B11111111111111111111,
    0B11111111111111111111
  },
  {
    0B00000000001100000000,
    0B00000000011110000000,
    0B00000001111110000000,
    0B00000011111110000000,
    0B00000111111110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B11111111111111111111,
    0B11111111111111111111,
    0B11111111111111111111
  },
  {
    0B00000000001100000000,
    0B00000000011110000000,
    0B00000001111110000000,
    0B00000011111110000000,
    0B00000111111110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B11111111111111111111,
    0B11111111111111111111,
    0B11111111111111111111
  },
  {
    0B00000000001100000000,
    0B00000000011110000000,
    0B00000001111110000000,
    0B00000011111110000000,
    0B00000111111110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B11111111111111111111,
    0B11111111111111111111,
    0B11111111111111111111
  },
  {
    0B00000000001100000000,
    0B00000000011110000000,
    0B00000001111110000000,
    0B00000011111110000000,
    0B00000111111110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B11111111111111111111,
    0B11111111111111111111,
    0B11111111111111111111
  },
  {
    0B00000000001100000000,
    0B00000000011110000000,
    0B00000001111110000000,
    0B00000011111110000000,
    0B00000111111110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B11111111111111111111,
    0B11111111111111111111,
    0B11111111111111111111
  },
  {
    0B00000000001100000000,
    0B00000000011110000000,
    0B00000001111110000000,
    0B00000011111110000000,
    0B00000111111110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B11111111111111111111,
    0B11111111111111111111,
    0B11111111111111111111
  },
  {
    0B00000000001100000000,
    0B00000000011110000000,
    0B00000001111110000000,
    0B00000011111110000000,
    0B00000111111110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B11111111111111111111,
    0B11111111111111111111,
    0B11111111111111111111
  },
  {
    0B00000000001100000000,
    0B00000000011110000000,
    0B00000001111110000000,
    0B00000011111110000000,
    0B00000111111110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B11111111111111111111,
    0B11111111111111111111,
    0B11111111111111111111
  }
};

RGBmatrixPanel matrix(A, B, C, D, CLK, LAT, OE, false, 64);

static screen_state_t screen_state;
static cursor_t cursor;

static const uint16_t COLOR_BLACK = matrix.Color333(0, 0, 0);
static const uint16_t COLOR_GREEN = matrix.Color333(0, 7, 0);

/** @brief Clears the LED matrix
 */
void clear_screen () {
  matrix.fillScreen(COLOR_BLACK);
}

/** @brief Sets the position of the drawing cursor
 */
void set_cursor (int row, int col) {
  cursor.row = row;
  cursor.col = col;
}

/** @brief Prints out a given graphic at the cursor position.
 *
 *  @param graphic the bit matrix containing the graphic
 *  @param width   the width of the graphic
 *  @param height  the height of the graphic
 */
void print_graphic (uint32_t* graphic, int width, int height) {
  /* 
   * Constants are default 16-bit in Arduino so we need to make sure
   * our mask is wide enough.
   */
  uint32_t mask = 0x1;

  /*
   * Read the graphics array and print it out pixel by pixel
   */
  for (int row = 0; row < height; row ++) {
    for (int col = 0; col < width; col++) {
      // We need to print from the MSB to the LSB
      if (graphic[row] & (mask << (width - col - 1))) {
        matrix.drawPixel(cursor.col + col, cursor.row + row, screen_state.curr_color);
      } else {
        matrix.drawPixel(cursor.col + col, cursor.row + row, COLOR_BLACK);
      }
    }
  }
}

/** @brief Draws a number at the current cursor position.
 *
 *  @param num the number to print out
 *
 *  @note  num must be between 0 and NUM_DIGITS to work
 */
void draw_num (int num) {
  if (num >= 0 && num < NUM_DIGITS) {
    print_graphic(NUM_GRAPHICS[num], NUM_WIDTH, NUM_HEIGHT);
  }
}

/** @brief Draws num onto the scoreboard
 *
 *  @param num the number to draw
 *
 *  @note  Since we only have 3 digits space, the score must be 0 <= 999
 */
void draw_score (int num) {
  if (num >= 0 && num <= MAX_SCORE) {
    // Draw the score from right to left
    for (int i = 0; i < NUM_SCORE_DIGITS; i++) {
      // Get the current digit
      int curr_digit = num % 10;

      // Set the cursor to the appropriate digit position and draw it
      set_cursor(SCORE_POSITIONS[i].row, SCORE_POSITIONS[i].col);
      draw_num(curr_digit);

      num = num / 10;
    }
  }
  

}

void setup() {
  /*** Setup global variables ***/

  // Initialize the cursor
  cursor.row = 0;
  cursor.col = 0;

  // Initialize screen settings
  screen_state.curr_color = COLOR_GREEN;

  // Initialize the matrix
  matrix.begin();
}

static int i = 0;

void loop() {
  draw_score(i);
  i = (i + 1) % (MAX_SCORE + 1);
  
  delay(1000);
}
