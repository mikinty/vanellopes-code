/** @file screen_driver_32x64
    @brief Implementation of the driver to display images and text on the
    32x64 LED Matrix screen.

    Adapted from the Arduino RGB Matrix Panel library.

    @author Michael You (mikinty)

    @note TO be run on an Arduino Mega
*/

#include <RGBmatrixPanel.h>
#include "screen_driver_32x64.h"

#define OE   9
#define LAT 10
#define CLK 11
#define A   A0
#define B   A1
#define C   A2
#define D   A3

#define NUM_WIDTH  20
#define NUM_HEIGHT 30
#define NUM_DIGITS 10

/*** NUMBER GRAPHICS ***/
static const uint32_t NUM_GRAPHICS[NUM_DIGITS][NUM_HEIGHT] = {
  {
    0B00000001111100000000,
    0B00000111111110000000,
    0B00111111111111110000,
    0B00111111111111111000,
    0B00111110000001111100,
    0B00110000000000001100,
    0B00110000000000001100,
    0B00110000000000001100,
    0B00110000000000001100,
    0B00110000000000001100,
    0B00110000000000001100,
    0B00110000000000001100,
    0B00110000000000001100,
    0B00110000000000001100,
    0B00110000000000001100,
    0B00110000000000001100,
    0B00110000000000001100,
    0B00110000000000001100,
    0B00110000000000001100,
    0B00110000000000001100,
    0B00110000000000001100,
    0B00110000000000001100,
    0B00110000000000001100,
    0B00110000000000001100,
    0B00110000000000001100,
    0B00111110000001111100,
    0B00111111111111111000,
    0B00111111111111110000,
    0B00000111111110000000,
    0B00000001111100000000
  },
  {
    0B00000000001100000000,
    0B00000000011110000000,
    0B00000001111110000000,
    0B00000011111110000000,
    0B00000111111110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B11111111111111111111,
    0B11111111111111111111,
    0B11111111111111111111
  },
  {
    0B00000000001100000000,
    0B00000000011110000000,
    0B00000001111110000000,
    0B00000011111110000000,
    0B00000111111110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B11111111111111111111,
    0B11111111111111111111,
    0B11111111111111111111
  },
  {
    0B00000000001100000000,
    0B00000000011110000000,
    0B00000001111110000000,
    0B00000011111110000000,
    0B00000111111110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B11111111111111111111,
    0B11111111111111111111,
    0B11111111111111111111
  },
  {
    0B00000000001100000000,
    0B00000000011110000000,
    0B00000001111110000000,
    0B00000011111110000000,
    0B00000111111110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B11111111111111111111,
    0B11111111111111111111,
    0B11111111111111111111
  },
  {
    0B00000000001100000000,
    0B00000000011110000000,
    0B00000001111110000000,
    0B00000011111110000000,
    0B00000111111110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B11111111111111111111,
    0B11111111111111111111,
    0B11111111111111111111
  },
  {
    0B00000000001100000000,
    0B00000000011110000000,
    0B00000001111110000000,
    0B00000011111110000000,
    0B00000111111110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B11111111111111111111,
    0B11111111111111111111,
    0B11111111111111111111
  },
  {
    0B00000000001100000000,
    0B00000000011110000000,
    0B00000001111110000000,
    0B00000011111110000000,
    0B00000111111110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B11111111111111111111,
    0B11111111111111111111,
    0B11111111111111111111
  },
  {
    0B00000000001100000000,
    0B00000000011110000000,
    0B00000001111110000000,
    0B00000011111110000000,
    0B00000111111110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B11111111111111111111,
    0B11111111111111111111,
    0B11111111111111111111
  },
  {
    0B00000000001100000000,
    0B00000000011110000000,
    0B00000001111110000000,
    0B00000011111110000000,
    0B00000111111110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B00000000011110000000,
    0B11111111111111111111,
    0B11111111111111111111,
    0B11111111111111111111
  }
};

RGBmatrixPanel matrix(A, B, C, D, CLK, LAT, OE, false, 64);

static screen_state_t screen_state;
static cursor_t cursor;

static const uint16_t COLOR_BLACK = matrix.Color333(0, 0, 0);
static const uint16_t COLOR_GREEN = matrix.Color333(0, 7, 0);

void clear_screen () {
  matrix.fillScreen(COLOR_BLACK);
}

void print_graphic (uint32_t* graphic, int width, int height) {
  /* 
   * Constants are default 16-bit in Arduino so we need to make sure
   * our mask is wide enough.
   */
  uint32_t mask = 0x1;

  /*
   * Read the graphics array and print it out pixel by pixel
   */
  for (int row = 0; row < height; row ++) {
    for (int col = 0; col < width; col++) {
      // We need to print from the MSB to the LSB
      if (graphic[row] & (mask << (width - col - 1))) {
        matrix.drawPixel(cursor.col + col, cursor.row + row, screen_state.curr_color);
      } else {
        matrix.drawPixel(cursor.col + col, cursor.row + row, COLOR_BLACK);
      }
    }
  }
}

void draw_num (int num) {
  if (num >= 0 && num < NUM_DIGITS) {
    print_graphic(NUM_GRAPHICS[num], NUM_WIDTH, NUM_HEIGHT);
  }
}

void setup() {
  /*** Setup global variables ***/

  // Initialize the cursor
  cursor.row = 0;
  cursor.col = 0;

  // Initialize screen settings
  screen_state.curr_color = COLOR_GREEN;

  // Initialize the matrix
  matrix.begin();
}

static int i = 0;

void loop() {
  i = (i+1) % NUM_DIGITS;

  draw_num(i);
  delay(1000);
}
